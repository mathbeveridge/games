<?xml version="1.0" encoding="UTF-8" ?>

<section xml:id="sec-binary">
<title>Binary Representation of Numbers</title>
<p>

When you see the number 263, there is no ambiguity. 
You see  "two hundred sixty three." 
</p>
<p>
Of course this interpretation uses the 
standard convention for how to read numbers. That is, the rightmost number 
is the "ones place," the middle digit is the "tens place" and the left digit 
is the "hundreds place." You have gotten so used to this convention that it is second nature to you.
But when you originally learned it, your teacher probably had you break this number down like so:
<me>
263 = 200 + 60 + 3.
</me>

Mathematicians call this <em>decimal representation</em> of a number. They might prefer 
to write this as
<me>
263 = (2 \times 10^2) + (6 \times 10^1) + (3 \times 10^0),
</me>
and they call this the <em>decimal expansion</em> of the number.
Of course, <em>decimal</em> refers to the fact that we have ten digits in our number system 
<m>0,1,2,3,4,5,6,7,8,9</m>. When we need to count above 9, we reuse these digits, 
but shift them over by one to represent multiples of 10. 
This scheme goes from 10 up to 99, where we must add another digit to represent multiples of 100, 
and so on. Every positive integer has a unique decimal representation, 
and this uniqueness is crucial.

</p>
<p>
However, the use of ten different digit symbols is a <em>choice</em>. 
Undoubtedly, this is a <em>convenient</em> choice for obvious reasons. 
Computers do not use a decimal representation of numbers  because they don't have fingers and toes. 
Instead, they are built out of switches that have two positions: "on" and "off." 
The "on" state corresponds to having electrical current present, and it is assigned the value "1."  
The "off" state corresponds to no current, and it is assigned the value "0." 
</p>
<p>
In other words, the "digits" in a digital computer have two states. 
So in the computer worldview, a <term>binary number system</term> 
(that only uses the symbols 0 and 1) fits its worldview much better than a 
decimal number system.<fn>If we were visited by aliens with 17 polyps on 
	their one sensory pseudopod, you can bet that they will use 17 digits in their number system.</fn> 

</p><p>
	Here is how a computer counts to 8 in binary:

<me>
\begin{array}{|r|r|r|}
\hline
\mbox{decimal} &amp; \mbox{binary} &amp; \mbox{binary expansion} \\
\hline
1 &amp; 1 &amp; ( 1 \times 2^0)\\
2 &amp; 10 &amp; ( 1 \times 2^1) + ( 0 \times 2^0) \\
3 &amp; 11 &amp; ( 1 \times 2^1) + ( 1 \times 2^0) \\
4 &amp; 100 &amp;  ( 1 \times 2^2) +( 0 \times 2^1) + ( 0 \times 2^0)\\
5 &amp; 101 &amp; ( 1 \times 2^2) +( 0 \times 2^1) + ( 1 \times 2^0)\\
6 &amp; 110 &amp; ( 1 \times 2^2) +( 1 \times 2^1) + ( 0 \times 2^0)\\
7 &amp; 111 &amp; ( 1 \times 2^2) +( 1 \times 2^1) + ( 1 \times 2^0)\\
8 &amp; 1000 &amp; ( 1 \times 2^3) +( 0 \times 2^2) +( 0 \times 2^1) + ( 0 \times 2^0)\\
\hline
\end{array}
</me>



In a decimal representation, we have the "ones place," the "tens place", 
the "hundreds place" and so on. In a binary representation, 
we have the "ones place" the "twos place", the "fours place", 
the "eights place" and so on. Furthermore, there are only two digits employed 
in the binary representation: 0 and 1. Just as for a decimal representation, 
the binary representation of a number is unique.
</p>


<subsection>
<title>Converting between number systems</title>

<p>
Let's practice some conversions between binary representations and decimal representations.  
Going from binary to decimal is pretty straightforward. Here are some examples:
<me>
\begin{array}{|r|c|c|}
\hline
\mbox{binary} &amp; \mbox{binary expansion}  &amp; \mbox{decimal} \\
\hline
01011 &amp; \phantom{1}0 +  8 + 0 + 2 + 1 &amp; 11 \\
10010 &amp; 16+0 + 0+ 2+ 0  &amp; 18 \\
11001 &amp;  16+ 8+0 + 0 +1  &amp; 25 \\
11111 &amp;  16+ 8+4+2+1  &amp; 31 \\
\hline
\end{array}
</me>


Converting from decimal to binary is a bit harder because most people haven't memorized the powers of 2. 
Here are   the first few values of <m>2^n</m>.

<me>
\begin{array}{|c|c|c|c|c|c|c|c|c|c|c|}
\hline
2^0 &amp; 2^1 &amp; 2^2 &amp; 2^3 &amp; 2^4 &amp; 2^5 &amp; 2^6 &amp; 2^7 &amp; 2^8 &amp; 2^9 &amp; 2^{10} \\
\hline
1 &amp; 2 &amp; 4 &amp; 8 &amp; 16 &amp; 32 &amp; 64 &amp; 128 &amp; 256 &amp; 512 &amp; 1024 \\
\hline
\end{array}
</me>


Here is how to find the binary representation of a positive integer <m>n</m>:
	</p>



	<algorithm>
		<title>Finding the Binary Representation</title>
		<p>
			Given a positive integer <m>n</m>:
		</p>
		<p>
		<ol>
					<li>
						<p>
	 Find the largest <m>k</m> such that <m>2^k \leq n</m>
						</p>
					</li>
					<li>
						<p>
	 Repeat step 1 for the remainder <m>n - 2^k</m> until you reach 0.
						</p>
					</li>
					<li>
						<p>
	 This gives you the expansion <m>n= 2^{k_1} + 2^{k_2} + \cdots + 2^{k_r}</m>.
						</p>
					</li>
					<li>
						<p>
	 The binary representation of <m>n</m> consists of <m>k_1+1</m> digits.
	  It has a 1 in the positions <m>k_1, k_2, \ldots, k_r</m>, 
	  where the rightmost position is indexed by 0. The remaining digits are each 0.
						</p>
					</li>
				</ol>

		</p>
	</algorithm>
<p>

Here are some examples of converting from decimal representation to binary representation
<me>
\begin{array}{|r|rcl|r|}
\hline
\mbox{decimal} &amp; \mbox{decomposing into powers of 2}  &amp;&amp;&amp; \mbox{binary} \\
\hline
53 &amp;  32 + 16 + 4 +1 &amp;=&amp; 2^5 + 2^4 + 2^2 + 2^0 &amp; 110101 \\
44 &amp;  32 + 8 + 4  &amp;=&amp; 2^5 + 2^3 + 2^2  &amp; 101100 \\
31 &amp;   16 + 8 + 4 +2 +1 &amp;=&amp; 2^4 + 2^3 + 2^2 + 2^1+2^0 &amp; 11111 \\
80 &amp;   64 + 16 &amp;=&amp; 2^6 + 2^4  &amp; 1010000 \\
\hline
\end{array}
</me>


Finally, it is often useful to add leading zeros to a binary number, 
so that all the numbers under consideration have the same length. 
In other words, we might replace the list of binary numbers 
<m>0</m>, <m>101</m>, <m>1100</m> with the representations
 <m>0000</m>, <m>0101</m>, <m>1100</m> so that each of these numbers uses four symbols.

</p>
</subsection>


<subsection>

<title>Addition of Binary Numbers</title>

<p>
Addition of binary numbers follows rules analogous to decimal addition: we must carry over to the next column whenever we exceed the digit symbols available. For us, this means that whenever we have a column containing <m>1+1</m>, we must enter a 0 in that column and carry over a 1 to the next column. For example, we have:

<men xml:id="eqn-binary-addition">
\begin{array}{cccccc}

\begin{array}{r}
101 \\
+ 011 \\
\hline
1000
\end{array},

&amp;
\qquad
\begin{array}{r}
111 \\
+ 111 \\
\hline
1110
\end{array},

&amp;
\qquad
\begin{array}{r}
10110 \\
+00101\\
\hline
11011
\end{array},

&amp;

\qquad
\begin{array}{r}
01101 \\
+ 10110 \\
\hline
100011
\end{array}.
\end{array}
</men>

You should check that you get the same answers for these sums when you convert the numbers to decimal representations.
</p>
</subsection>



<subsection>

	<title>Nim Addition of Binary Numbers</title>

<p>

The key to cracking the game of nim is to use a <em>different</em> type of addition of 
binary numbers, which we will call <term>nim addition</term>. 
We use the symbol  <m>\nimsum</m> to denote this operation. 

</p><p>
Nim addition of binary numbers is actually easier than regular binary addition. 
You perform the addition <em>without carrying over</em>!
In other words,  regular addition gives <m> 1+1 = 10</m>, while  
Nim addition gives <m>1 \nimsum 1 = 0</m>. 
For example, taking the nim sum of the numbers in equation <xref ref="eqn-binary-addition" />, we have


<men xml:id="eqn-nim-addition">
\begin{array}{cccccc}

\begin{array}{r}
101 \\
\nimsum 011 \\
\hline
110
\end{array},

&amp;
\qquad
\begin{array}{r}
111 \\
\nimsum 111 \\
\hline
000
\end{array},

&amp;
\qquad


\begin{array}{r}
10110 \\
\nimsum 00101\\
\hline
10011
\end{array},

&amp;
\qquad

\begin{array}{r}
01101 \\
\nimsum 10110 \\
\hline
11011
\end{array}.
\end{array}
</men>

As you can see from the answers in equations <xref ref="eqn-binary-addition"/> 
and <xref ref="eqn-nim-addition" />,  nim sum is completely different from regular addition.

</p>
<p>

In fact, nim sums have other applications. 
For example, in computer science this operation evaluated by taking the "bitwise exclusive or" 
of the two numbers.  For the game of Nim, we will see that taking the nim sums of the heap sizes 
reveals whether we are in an <m>\cN</m>-position or a <m>\cP</m>-position.

</p>
<p>
We note that there is nothing wrong with taking the nim sum of two numbers written 
in decimal notation. To do so, we must convert to binary notation, perform the nim sum, 
and then convert back to decimal. Here is an example: <m>7 \nimsum 3 = 4</m> because
<me>
\label{eqn:nimsum-example}
\underbrace{7  \nimsum   3}_{\mbox{decimal}}  =
\underbrace{111  \nimsum   011}_{\mbox{binary}}  =
\underbrace{100}_{\mbox{binary}}  =
\underbrace{4}_{\mbox{decimal}}.
</me>
Finally, it is  easy to take the nim sum of multiple numbers simultaneously. 
</p>
<algorithm>
	<title>Finding the Nim Sum of Mutiple Numbers</title>
<p>
	<ol>
		<li>Line up the binary numbers, as usual.</li>
		<li>Place a 1 in the columns where there are 
			an odd number of 1's.</li>
		<li>Place a 0 in the columns with an even number of 1's.</li>
	</ol>
</p>
</algorithm>

<p>
Here is an example of the nim sum of 4 binary numbers:

<me>
\begin{array}{r}
1\,1\,0\,1\,1 \\
\nimsum \,0\,1\,0\,0\,1 \\
\nimsum \,0\,0\,1\,1\,1 \\
\nimsum \,1\,1\,0\,0\,0 \\
\hline
0 \, 1 \, 1 \,0 \, 1.
\end{array}
</me>

When written in decimal notation, this says that <m>27 \nimsum 9 \nimsum 7 \nimsum 24 = 13</m>.
</p>

<p>
We end this section with two final lemmas.

<lemma xml:id="lemma-nimadd-rules"> 
<statement>Nim addition satisfies the following conditions for any integers <m>a,b,c</m>:
<ol>
	<li>Additive inverse law:  <m>a \oplus a = 0</m>,</li>
	<li>Commutative law:  <m>a \oplus b = b \oplus a</m>,</li>
	<li>Associative law:  <m>(a \oplus b) \oplus c = a \oplus (b \oplus c)</m>.</li>
</ol>
</statement>
</lemma>

</p>
<p>
<proof>
<p>
We leave the proof of these three properties for the exercises.
</p>
</proof>
</p>
<p>

<lemma xml:id="lemma-cancel"> 
<title>Cancellation Law</title>
<statement>
If <m>a \oplus c = b \oplus c</m> then <m>a=b</m>.
</statement>
</lemma>

</p>
<p>
<proof>
<p>
Suppose that <m>a \oplus c = b \oplus c</m>. Since <m>c \oplus c = 0</m> and nim addition is associative, we have
<me>
a= a \oplus 0  = a \oplus (c \oplus c) = (a \oplus c)  \oplus c = (b \oplus c)  \oplus c= b \oplus  (c \oplus c) =
b \oplus 0 = b.
</me>
</p>
</proof>
</p>
<p>

We will need  <xref ref="lemma-cancel"/> in Section <xref ref="sec-sumgames"/>.
</p>
</subsection>
</section>
